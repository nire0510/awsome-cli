{
  "services": [
    {
      "name": "Amplify",
      "queries": [
        {
          "description": "Amplify applications gateways",
          "command": "aws amplify list-apps --output json"
        }
      ]
    },
    {
      "name": "API Gateway",
      "queries": [
        {
          "description": "API gateways",
          "command": "aws apigateway get-rest-apis --query 'items[].{ Id:id, Name:name, Description:description }' --output json"
        },
        {
          "description": "API gateway domain names",
          "command": "aws apigateway get-domain-names --query 'items[].{ DomainName:domainName, RegionalDomainName:regionalDomainName }' --output json"
        }
      ]
    },
    {
      "name": "Athena",
      "queries": [
        {
          "description": "Data catalogs",
          "command": "aws athena list-data-catalogs --query 'DataCatalogsSummary[]' --output json"
        },
        {
          "description": "Databases",
          "command": "aws athena list-databases --catalog-name {CatalogName} --query 'DatabaseList[].{ Name:Name, Description:Description }' --output json",
          "variables": [
            {
              "name": "CatalogName",
              "description": "Catalog name?",
              "type": "text"
            }
          ]
        }
      ]
    },
    {
      "name": "CloudFront",
      "queries": [
        {
          "description": "Distributions",
          "command": "aws cloudfront list-distributions --query 'DistributionList.Items[*].{ Id:Id, DomainName:DomainName, Enabled:Enabled, Status:Status }' --output json"
        },
        {
          "description": "Distribution aliases",
          "command": "aws cloudfront list-distributions --query 'DistributionList.Items[*].{ Id:Id, DomainName:DomainName, Aliases:Aliases.Items }' --output json"
        },
        {
          "description": "Distribution invalidations",
          "command": "aws cloudfront list-invalidations --distribution-id {DistributionId} --query 'InvalidationList.Items[*]' --output json",
          "variables": [
            {
              "name": "DistributionId",
              "description": "Distribution Id?",
              "type": "text"
            }
          ]
        }
      ]
    },
    {
      "name": "CodeDeploy",
      "queries": [
        {
          "description": "Applications",
          "command": "aws deploy list-applications --query 'applications[].{ Name:@ }' --output json"
        },
        {
          "description": "Deployment groups",
          "command": "aws deploy list-deployment-groups --application-name {ApplicationName} --query 'deploymentGroups[].{ Name:@ }' --output json",
          "variables": [
            {
              "name": "ApplicationName",
              "description": "Application name?",
              "type": "text"
            }
          ]
        },
        {
          "description": "Deployments",
          "command": "aws deploy list-deployments --application-name {ApplicationName} --deployment-group-name {DeploymentGroupName} --query 'deployments[].{ Name:@ }' --output json",
          "variables": [
            {
              "name": "ApplicationName",
              "description": "Application name?",
              "type": "text"
            },
            {
              "name": "DeploymentGroupName",
              "description": "Deployment group name?",
              "type": "text"
            }
          ]
        },
        {
          "description": "Deployment info",
          "command": "aws deploy get-deployment --deployment-id {DeploymentId} --query 'deploymentInfo.[{ DeploymentId:deploymentId, ApplicationName:applicationName, DeploymentGroupName:deploymentGroupName, Status:status, CreateTime:createTime, CompleteTime:completeTime }]' --output json",
          "variables": [
            {
              "name": "DeploymentId",
              "description": "Deployment Id?",
              "type": "text"
            }
          ]
        }
      ]
    },
    {
      "name": "EC2",
      "queries": [
        {
          "description": "Instances types & IP addresses",
          "command": "aws ec2 describe-instances --query 'Reservations[].Instances[].{ InstanceId:InstanceId, Name:Tags[?Key==`Name`].Value | [0], Type:InstanceType, PrivateIpAddress:PrivateIpAddress, PublicIpAddress:PublicIpAddress }' --output json"
        },
        {
          "description": "Instances VPCs & subnets",
          "command": "aws ec2 describe-instances --query 'Reservations[].Instances[].{ InstanceId:InstanceId, Name:Tags[?Key==`Name`].Value | [0], VPC:VpcId, Subnet:SubnetId }' --output json"
        },
        {
          "description": "Instances security groups",
          "command": "aws ec2 describe-instances --query 'Reservations[].Instances[].{ InstanceId:InstanceId, Name:Tags[?Key==`Name`].Value | [0], SecurityGroupIds:SecurityGroups[*].GroupId, SecurityGroupNames:SecurityGroups[*].GroupName }' --output json"
        },
        {
          "description": "Instances which have stopped & their reason",
          "command": "aws ec2 describe-instances --filters Name=instance-state-name,Values=stopped --query 'Reservations[].Instances[].{ InstanceId:InstanceId, Name:Tags[?Key==`Name`].Value | [0], StateTransitionReason:StateTransitionReason }' --output json"
        },
        {
          "description": "Key pairs",
          "command": "aws ec2 describe-key-pairs --query 'KeyPairs[].{ KeyPairId:KeyPairId, KeyName:KeyName }' --output json"
        }
      ]
    },
    {
      "name": "IAM",
      "queries": [
        {
          "description": "Users",
          "command": "aws iam list-users --query 'Users[].{ UserId:UserId, UserName:UserName, CreateDate:CreateDate, PasswordLastUsed:PasswordLastUsed }' --output json"
        }
      ]
    },
    {
      "name": "RDS",
      "queries": [
        {
          "description": "DB instances",
          "command": "aws rds describe-db-instances --query 'DBInstances[].{ Id:DBInstanceIdentifier, Name: DBInstanceIdentifier, DBInstanceClass:DBInstanceClass, Engine:Engine, EngineVersion:EngineVersion, DBInstanceStatus:DBInstanceStatus, Storage:AllocatedStorage }' --output json"
        },
        {
          "description": "DB instances addresses",
          "command": "aws rds describe-db-instances --query 'DBInstances[].{ Id:DBInstanceIdentifier, Name: DBInstanceIdentifier, Endpoint:join(`:`, [Endpoint.Address, to_string(Endpoint.Port)]) }' --output json"
        }
      ]
    },
    {
      "name": "Rout53",
      "queries": [
        {
          "description": "Hosted zones",
          "command": "aws route53 list-hosted-zones --query 'HostedZones[].{ Id:Id, Name:Name, ResourceRecordSetCount:ResourceRecordSetCount }' --output json"
        }
      ]
    },
    {
      "name": "S3",
      "queries": [
        {
          "description": "Folder content",
          "command": "aws s3api list-objects --bucket {BucketName} --prefix {FolderPath} --query 'Contents[*].{ Key:Key, Size:Size, LastModified:LastModified}'",
          "variables": [
            {
              "name": "BucketName",
              "description": "Bucket name?",
              "type": "text"
            },
            {
              "name": "FolderPath",
              "description": "Folder path?",
              "type": "text"
            }
          ]
        }
      ]
    },
    {
      "name": "SNS",
      "queries": [
        {
          "description": "Subscriptions",
          "command": "aws sns list-subscriptions --query 'Subscriptions[*]'"
        }
      ]
    }
  ]
}
